@import "../_mixins";

// @IMPORTANT: Tailwind v3.1.6 has a bug - it confuses `!col` evaluation/comment in code as important modifier,
// then it compiles .col, .row {...} twice, incorrectly the second time as .\!col, .\!row, .col, .row {... !important}.
// => avoid consolidating classes for now, or search and replace all instances of negation with brackets `!(col)`.
.col {
  display: flex;
  flex-direction: column;

  // Required for Scroll View, else the top most container will scroll, instead of the Scrollable element
  max-width: 100%;
  max-height: 100%;

  // Required for Tooltip to work correctly
  // Required for proper layout:
  //  - 'overflow: hidden' only works for position relative/absolute/static
  //  - 'position: absolute' of child components to be contained within parent
  position: relative;
}

.row {
  display: flex;
  flex-direction: row;
  max-width: 100%;
  max-height: 100%;
  position: relative;
}

.text {
  position: relative;
  //display: inline-flex; // truncate ellipsis does not work with flex, leave as default <span> behavior
}

.col.reverse {
  flex-direction: column-reverse;
}

.col.start,
.col.left {
  align-items: flex-start;
}

.col.end,
.col.right {
  align-items: flex-end;
}

.col.center {
  align-items: center;
}

.col.top {
  justify-content: flex-start;
}

.col.bottom {
  justify-content: flex-end;
}

.col.middle {
  justify-content: center;
}

.col.justify {
  align-items: stretch;
}

.col.justify-around {
  justify-content: space-around;
}

.col > .fill-width {
  align-self: stretch;
}

.col > .fill-height {
  flex: 1;
}

.col.no-shrink,
.row.no-shrink {
  flex-shrink: 0;
}

.col.wrap,
.row.wrap {
  &:not(.no-wrap) {
    flex-wrap: wrap;
  }
}

.row.start,
.row.left {
  justify-content: flex-start;
}

.row.end,
.row.right {
  justify-content: flex-end;
}

.row.center {
  justify-content: center;
}

.row.top {
  align-items: flex-start;
}

.row.bottom {
  align-items: flex-end;
}

.row.middle {
  align-items: center;
}

.row.reverse {
  flex-direction: row-reverse;
}

.row.justify,
.col.stretch {
  justify-content: space-between;
}

.row.justify-around {
  justify-content: space-around;
}

.row.stretch {
  align-content: space-between;
}

.col.spread,
.row.spread {
  justify-content: space-evenly;
}

.row > .fill-width {
  flex: 1;
}

.row > .fill-height {
  align-self: stretch;
}

// Define this before width/height utilities to avoid override
.scroll {
  &:extend(.scrollable all);
  max-width: 100%;
  max-height: 100%;

  // To prevent multiple scrollables in the same parent from collapsing
  &.col {
    .col > & {
      flex-shrink: 1;
    }

    .row > & {
      flex-shrink: 0;
    }
  }

  &.row {
    .row > & {
      flex-shrink: 1;
    }

    .col > & {
      flex-shrink: 0;
    }
  }
}

.scrollable {
  overflow: auto;

  // to avoid scrollbar taking up content space (Firefox has this behavior by default, Safari may not support it)
  overflow-x: overlay; // horizontal scroll
  overflow-y: overlay; // vertical scroll

  /* iOS smooth scrolling - but causes animation content to hide on iOS */
  -webkit-overflow-scrolling: touch;
  //overflow: hidden; // disable to enable scroll on iOS

  &:hover, &:focus, &:active {
    overflow: auto;

    // to avoid scrollbar taking up content space
    overflow-x: overlay;
    overflow-y: overlay;
  }
}

// It's not possible to have scroll in one direction while overflow visible the other.
// @see https://stackoverflow.com/a/6433475
// Leaving code below for reference only
//.scrollable-x {
//  overflow-x: overlay; // horizontal scroll
//
//  &:hover, &:focus, &:active {
//    overflow-x: overlay;
//  }
//}
//
//.scrollable-y {
//  overflow-y: overlay; // horizontal scroll
//
//  &:hover, &:focus, &:active {
//    overflow-y: overlay;
//  }
//}

// Note that vertical scrollbar will cause overflow horizontally, showing horizontal scrollbar at the same time
.no-scrollbar-overlay {
  overflow-x: auto;
  overflow-y: auto; // vertical scroll

  &:hover, &:focus, &:active {
    overflow-x: auto;
    overflow-y: auto;
  }
}

.flex-default {
  flex: 0 1 auto;
}

.flex--fill {
  .flex-col();
  .flex-fill();
}

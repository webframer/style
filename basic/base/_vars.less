@import '../_mixins';

/* CSS Variables for theming ------------------------------------------------ */
/* https://blog.logrocket.com/creating-custom-themes-tailwind-css/ */
:root, // the html container
:host, // the .shadow-dom container
.theme-light {
  .theme_vars();

  /* Spacing */
  // Use em relative to font size to retain proportion fidelity and to easily scale up/down inputs, buttons, etc.
  --padding-smallest:      0.25em;
  --padding-smaller:       0.5em;
  --padding-small:         0.75em;
  --padding:               1em;
  --padding-large:         1.25em;
  --padding-larger:        1.5em;
  --padding-largest:       1.75em;
  --margin-smallest:       0.25em;
  --margin-smaller:        0.5em;
  --margin-small:          0.75em;
  --margin:                1em;
  --margin-large:          1.25em;
  --margin-larger:         1.5em;
  --margin-largest:        1.75em;
  //@space: 16; // use 16px to match with Tailwind and have sharp pixels when dividing content in half between gaps
  //@space-smallest:        @space * 4 / 16;
  //@space-smaller:         @space * 8 / 16;
  //@space-small:           @space * 12 / 16;
  //@space-large:           @space * 20 / 16;
  //@space-larger:          @space * 24 / 16;
  //@space-largest:         @space * 28 / 16;

  /* Border Radius */
  @radius: 6;
  --radius-smallest:       u(@radius * 3 / 6);
  --radius-smaller:        u(@radius * 4 / 6);
  --radius-small:          u(@radius * 5 / 6);
  --radius:                u(@radius);
  --radius-large:          u(@radius * 12 / 6);
  --radius-larger:         u(@radius * 18 / 6);
  --radius-largest:        u(@radius * 24 / 6);
  --radius-round:          999rem;

  --scrollbar-size:        u(5);

  /* Semantic variables */
  --border-color:          var(--neutral);
  --border-size:           u(1);
  --border-style:          solid;
  --border:                var(--border-size) var(--border-style) var(--border-color);

  --font-family:           @font-family-base;
  --font-family-secondary: @font-family-secondary;

  @size:                   16;
  --font-base:             u(@size);
  --font-small:            u(@size * 14 / 16);
  --font-smaller:          u(@size * 12 / 16);
  --font-smallest:         u(@size * 10 / 16);
  --font-large:            u(@size * 20 / 16);
  --font-larger:           u(@size * 24 / 16);
  --font-largest:          u(@size * 28 / 16);
  --font-2x:               u(@size * 32 / 16);
  --line-height:           1.5; // 1.5 is Tailwind default, easy to read and produces whole numbers if font size is even
  //--line-height-small:     1.2857142857; // 18/14
  //--line-height-smaller:   1.25; // 15/12
  //--line-height-smallest:  1.3; // 13/10
  //--line-height-large:     1.25; // 25/20
  //--line-height-larger:    1.25; // 30/24
  //--line-height-largest:   1.25; // 35/28
}

/* This can be extended to div, for now only target body for performance */
body[data-theme="dark"], // must have this so that tailwind does not prune .theme-dark style when not in HTML initially
.theme-dark {
  .theme_vars(
    @primary: hsl(250, 77%, 66%);
    @secondary: hsl(327, 87%, 67%);
    @accent: hsl(200, 100%, 66%);
    @info: hsl(202, 76%, 57%);
    @success: hsl(150, 44%, 52%);
    @warning: hsl(41, 72%, 52%);
    @error: hsl(2, 51%, 59%);
    @text: hsl(0, 0%, 80%);
    @bg: hsl(0, 0%, 13%); // RGB (33) - matching popular IDEs in dark mode
    @dark: hsl(0, 0%, 100%); /* white in dark mode */
    @grey: hsl(0, 0%, 50%);
    @light: hsl(0, 0%, 0%); /* black in dark mode */
    @shadow: white;
    @highlight: black;
    @inverted: -1;
  );
}

/**
 * Generate Theme CSS variables
 * Until hsl(from var(--color) h s l) syntax is supported by browsers, color definitions have to be defined twice.
 * @see: https://css-tricks.com/color-alpha-anywhere/
 */
.theme_vars(/*
   * Theme Colors
   * (use HSL format for usability and wider color gamut)
   * https://htmlcolors.com/color-converter
   */
  @primary: hsl(250, 66%, 60%);
  @secondary: hsl(327, 80%, 61%);
  @accent: hsl(200, 100%, 43%);
  @info: hsl(202, 86%, 67%);
  @success: hsl(150, 52%, 62%);
  @warning: hsl(41, 88%, 62%);
  @error: hsl(2, 71%, 69%);
  @text: hsl(0, 0%, 22%);
  @bg: hsl(0, 0%, 98%);
  @dark: hsl(0, 0%, 0%); /* white in dark mode */
  @grey: hsl(0, 0%, 50%); /* can be off-grey with some hint of saturation */
  @light: hsl(0, 0%, 100%); /* black in dark mode */
  @shadow: black;
  @highlight: white;
  @inverted: 1;
  @shade: 5% * @inverted;
  @shader: 10% * @inverted;
  @shadest: 15% * @inverted;
) {

  /*
   * Theme Color Shades
   * Since `hsl(from var(--color) h s calc(l - x%))` syntax is not yet supported,
   * define colors explicitly for each shade, with an average step of 5% lightness.
   */
  --primary-lightest: darken(@primary, -@shadest);
  --primary-lighter: darken(@primary, -@shader);
  --primary-light: darken(@primary, -@shade);
  --primary: @primary;
  --primary-dark: darken(@primary, @shade);
  --primary-darker: darken(@primary, @shader);
  --primary-darkest: darken(@primary, @shadest);

  --secondary-lightest: darken(@secondary, -@shadest);
  --secondary-lighter: darken(@secondary, -@shader);
  --secondary-light: darken(@secondary, -@shade);
  --secondary: @secondary;
  --secondary-dark: darken(@secondary, @shade);
  --secondary-darker: darken(@secondary, @shader);
  --secondary-darkest: darken(@secondary, @shadest);

  --accent-lightest: darken(@accent, -@shadest);
  --accent-lighter: darken(@accent, -@shader);
  --accent-light: darken(@accent, -@shade);
  --accent: @accent;
  --accent-dark: darken(@accent, @shade);
  --accent-darker: darken(@accent, @shader);
  --accent-darkest: darken(@accent, @shadest);

  --info-lightest: darken(@info, -@shadest);
  --info-lighter: darken(@info, -@shader);
  --info-light: darken(@info, -@shade);
  --info: @info;
  --info-dark: darken(@info, @shade);
  --info-darker: darken(@info, @shader);
  --info-darkest: darken(@info, @shadest);

  --success-lightest: darken(@success, -@shadest);
  --success-lighter: darken(@success, -@shader);
  --success-light: darken(@success, -@shade);
  --success: @success;
  --success-dark: darken(@success, @shade);
  --success-darker: darken(@success, @shader);
  --success-darkest: darken(@success, @shadest);

  --warning-lightest: darken(@warning, -@shadest);
  --warning-lighter: darken(@warning, -@shader);
  --warning-light: darken(@warning, -@shade);
  --warning: @warning;
  --warning-dark: darken(@warning, @shade);
  --warning-darker: darken(@warning, @shader);
  --warning-darkest: darken(@warning, @shadest);

  --error-lightest: darken(@error, -@shadest);
  --error-lighter: darken(@error, -@shader);
  --error-light: darken(@error, -@shade);
  --error: @error;
  --error-dark: darken(@error, @shade);
  --error-darker: darken(@error, @shader);
  --error-darkest: darken(@error, @shadest);

  /* Utility Colors */
  --text: @text; // default text color
  --text-inverted: @bg; // text color for non-default background, like primary
  --bg: @bg; // default background color

  /* Button colors */
  --dark-lightest: darken(@dark, -@shadest);
  --dark-lighter: darken(@dark, -@shader);
  --dark-light: darken(@dark, -@shade);
  --dark: @dark;
  --dark-dark: darken(@dark, @shade);
  --dark-darker: darken(@dark, @shader);
  --dark-darkest: darken(@dark, @shadest);

  --grey-lightest-2x: darken(@grey, -@shadest * 2);
  --grey-lightest: darken(@grey, -@shadest);
  --grey-lighter: darken(@grey, -@shader);
  --grey-light: darken(@grey, -@shade);
  --grey: @grey;
  --grey-dark: darken(@grey, @shade);
  --grey-darker: darken(@grey, @shader);
  --grey-darkest: darken(@grey, @shadest);
  --grey-darkest-2x: darken(@grey, @shadest * 2);

  --light-lightest: darken(@light, -@shadest);
  --light-lighter: darken(@light, -@shader);
  --light-light: darken(@light, -@shade);
  --light: @light;
  --light-dark: darken(@light, @shade);
  --light-darker: darken(@light, @shader);
  --light-darkest: darken(@light, @shadest);

  /* Border colors */
  --neutral-lightest: fade(@grey, 20%);
  --neutral-lighter: fade(@grey, 25%);
  --neutral-light: fade(@grey, 30%);
  --neutral: fade(@grey, 35%);
  --neutral-dark: fade(@grey, 50%);
  --neutral-darker: fade(@grey, 65%);
  --neutral-darkest: fade(@grey, 80%);

  /* Highlight in dark mode */
  // Brightening dark color requires less opacity than darkening light color visually
  --shadow-lightest-2x: fade(@shadow, 3%);
  --shadow-lightest: fade(@shadow, 5%);
  --shadow-lighter: fade(@shadow, 10%);
  --shadow-light: fade(@shadow, 20%);
  --shadow: fade(@shadow, 30%);
  --shadow-dark: fade(@shadow, 45%);
  --shadow-darker: fade(@shadow, 60%);
  --shadow-darkest: fade(@shadow, 75%);
  --shadow-darkest-2x: fade(@shadow, 90%);

  /* Shadow in dark mode */
  --highlight-lightest: fade(@highlight, 60%);
  --highlight-lighter: fade(@highlight, 45%);
  --highlight-light: fade(@highlight, 30%);
  --highlight: fade(@highlight, 15%);
  --highlight-dark: fade(@highlight, 10%);
  --highlight-darker: fade(@highlight, 5%);
  --highlight-darkest: fade(@highlight, 2.5%);

  /* Raw Color Channels for manipulation later */
  ---primary: hue(@primary) saturation(@primary) lightness(@primary);
  ---secondary: hue(@secondary) saturation(@secondary) lightness(@secondary);
  ---accent: hue(@accent) saturation(@accent) lightness(@accent);
  ---info: hue(@info) saturation(@info) lightness(@info);
  ---success: hue(@success) saturation(@success) lightness(@success);
  ---warning: hue(@warning) saturation(@warning) lightness(@warning);
  ---error: hue(@error) saturation(@error) lightness(@error);
  ---text: hue(@text) saturation(@text) lightness(@text);
  ---bg: hue(@bg) saturation(@bg) lightness(@bg);
  ---dark: hue(@dark) saturation(@dark) lightness(@dark);
  ---grey: hue(@grey) saturation(@grey) lightness(@grey);
  ---light: hue(@light) saturation(@light) lightness(@light);
  ---shadow: hue(@shadow) saturation(@shadow) lightness(@shadow);
  ---highlight: hue(@highlight) saturation(@highlight) lightness(@highlight);

  /* Semantic Colors */
  --link: var(--primary-darker);
  --link-focus: var(--primary-darker);
  --link-active: var(--primary);

  /* Default Colors */
  color: var(--text);
  background-color: var(--bg);
}
